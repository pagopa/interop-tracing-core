version: "3"
name: pagopa-interop-tracing
services:
  
  postgres:
    volumes:
      - ../packages/operations/test/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ../packages/enriched-data-handler/test/init-db.sql:/docker-entrypoint-initdb.d/02-init.sql
    image: postgres:14
    ports:
      - 55000:5432
    environment:
      POSTGRES_DB: tracing_db
      POSTGRES_USER: mydbuser
      POSTGRES_PASSWORD: mypassword
    command: -c 'max_connections=512' -c 'wal_level=logical'

  zookeeper:
    image: quay.io/debezium/zookeeper:2.3

  kafka:
    image: quay.io/debezium/kafka:2.3
    ports:
      - 9092:9092
      - 29092:29092
    depends_on:
      - zookeeper
    environment:
      ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: LISTENER_DOCKER://kafka:29092,LISTENER_HOST://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER://kafka:29092,LISTENER_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER:PLAINTEXT,LISTENER_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:53a6553765a806eda9905c43bfcfe09da6812035
    ports:
      - 8084:8080
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092

  # MinIO is a local S3-compatible storage, to replace AWS S3 in local development
  minio:
    image: quay.io/minio/minio:RELEASE.2024-02-06T21-36-22Z
    entrypoint: sh -c "chmod +x /etc/minio/init.sh && /etc/minio/init.sh"
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      MINIO_ROOT_USER: test-aws-key
      MINIO_ROOT_PASSWORD: test-aws-secret
      MINIO_SITE_REGION: eu-central-1
    volumes:
      - ./minio-data:/data
      - ./minio-config/init.sh:/etc/minio/init.sh
      - ./minio-config/minio.local.conf:/etc/minio/minio.conf
    restart: always

  elasticmq: # ElasticMQ is a local SQS-compatible queue system, to replace AWS SQS in local development
    image: softwaremill/elasticmq-native:1.5.7
    container_name: tracing-sqs
    ports:
      - 9324:9324
      - 9325:9325
    volumes:
      - ./elasticmq/elasticmq.local.conf:/opt/elasticmq.conf
    restart: always

  # PGAdmin is a web-based PostgreSQL admin interface, included for convenience
  pg-admin:
    image: dpage/pgadmin4:2024-04-01-1
    ports:
      - 8082:80
    environment:
      PGADMIN_DEFAULT_EMAIL: root@example.com
      PGADMIN_DEFAULT_PASSWORD: example
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
    restart: always
    volumes:
      - ./pg-servers.json:/pgadmin4/servers.json
      - ./pg-pass:/pgadmin4/pgpass
    # see https://stackoverflow.com/a/69475874/846273
    entrypoint: >
      /bin/sh -c "
      mkdir -m 700 /var/lib/pgadmin/storage/root_example.com;
      chown -R pgadmin:pgadmin /var/lib/pgadmin/storage/root_example.com;
      cp -prv /pgadmin4/pgpass /var/lib/pgadmin/storage/root_example.com/;
      chmod 600 /var/lib/pgadmin/storage/root_example.com/pgpass;
      /entrypoint.sh
      "

networks:
  develop-network:
    name: interop-tracing-develop-network
    driver: bridge